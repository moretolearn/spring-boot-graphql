scalar GregorianCalendar

type Cricketer {
    id: ID!
    name: String
    calendar:GregorianCalendar
    group: Group
}

enum Group {
    A
    B
    C
    D
    E
}


type Text {
	fname: String
	lname: String 
}

input TextI {
	fname: String
	lname: String 
}


type Query {
    findAll: [Cricketer]
    findOne(id: ID): Cricketer
}

type Mutation {
    create(name: String, calendar:GregorianCalendar, group: Group): Cricketer
    update(id: ID, name: String, group: Group): Cricketer
    delete(id: ID): Cricketer
    text(text: TextI): Text
    
}